// Generated by CoffeeScript 1.5.0
(function() {
  var async, bone;

  async = require('async');

  bone = module.exports = {};

  bone.io = {};

  bone.io.sources = {};

  bone.io.adapters = {};

  bone.io.register = function(adapter, callback) {
    return bone.io.adapters[adapter] = callback;
  };

  bone.io.register('socket.io-server', function(source, options, actions) {
    var _ref, _ref1;
    if ((_ref = options.outgoing) == null) {
      options.outgoing = [];
    }
    if ((_ref1 = options.incoming) == null) {
      options.incoming = [];
    }
    return options.io.sockets.on('connection', function(socket) {
      var action, callback, key, self, _fn, _i, _len, _ref2, _results;
      self = {};
      _ref2 = options.actions;
      _fn = function(action) {
        return async.series(options.outgoing, function(error) {
          if (error) {
            return bone.io.error(error);
          }
          return self[action] = function(data) {
            return socket.emit("" + source + ":" + action, data);
          };
        });
      };
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        action = _ref2[_i];
        _fn(action);
      }
      _results = [];
      for (key in actions) {
        callback = actions[key];
        _results.push(socket.on("" + source + ":" + key, function(data) {
          var context;
          context = {
            cookies: socket.handshake.cookies,
            socket: socket,
            headers: socket.handshake.headers,
            handshake: socket.handshake
          };
          return (function(callback) {
            return async.series(options.incoming, function(error) {
              if (error != null) {
                return bone.io.error(error);
              }
              return callback.apply(self, [data, context]);
            });
          })(callback);
        }));
      }
      return _results;
    });
  });

  bone.io.configure = function(source, options) {
    var adapter;
    bone.io.sources[source] = {
      options: options
    };
    if (options.noIncoming) {
      adapter = bone.io.adapters[options.adapter];
      return adapter(source, options);
    }
  };

  bone.io.route = function(source, actions) {
    var adapter, dataSource;
    dataSource = bone.io.sources[source];
    adapter = bone.io.adapters[dataSource.options.adapter];
    return adapter(source, dataSource.options, actions);
  };

}).call(this);
